diff --git a/newlib/libc/machine/h8300/defines.h b/newlib/libc/machine/h8300/defines.h
index 7ec12c4d0..ff885fe48 100644
--- a/newlib/libc/machine/h8300/defines.h
+++ b/newlib/libc/machine/h8300/defines.h
@@ -31,6 +31,7 @@
 
 #define MOVP	mov.w	/* pointers are 16 bits */
 #define ADDP	add.w
+#define SUBP	sub.w
 #define CMPP	cmp.w
 #define PUSHP	push
 #define POPP	pop
@@ -51,6 +52,7 @@
 
 #define MOVP	mov.w	/* pointers are 16 bits */
 #define ADDP	add.w
+#define SUBP	sub.w
 #define CMPP	cmp.w
 #define PUSHP	push
 #define POPP	pop
@@ -67,6 +69,7 @@
 
 #define MOVP	mov.l	/* pointers are 32 bits */
 #define ADDP	add.l
+#define SUBP	sub.l
 #define CMPP	cmp.l
 #define PUSHP	push.l
 #define POPP	pop.l
@@ -94,6 +97,7 @@
 
 #define MOVP	mov.w	/* pointers are 16 bits */
 #define ADDP	add.w
+#define SUBP	sub.w
 #define CMPP	cmp.w
 #define PUSHP	push
 #define POPP	pop
@@ -110,6 +114,7 @@
 
 #define MOVP	mov.l	/* pointers are 32 bits */
 #define ADDP	add.l
+#define SUBP	sub.l
 #define CMPP	cmp.l
 #define PUSHP	push.l
 #define POPP	pop.l
@@ -128,6 +133,7 @@
 #define A1E	e1
 #define A2E	e2
 #define A3E	e3
+#endif /* __H8300S__ */
 
 
 #ifdef __NORMAL_MODE__
@@ -135,4 +141,3 @@
 #else
 #define LEN(X) e##X
 #endif
-#endif /* __H8300S__ */
diff --git a/newlib/libc/machine/h8300/memset.S b/newlib/libc/machine/h8300/memset.S
index c92169c69..f9563161a 100644
--- a/newlib/libc/machine/h8300/memset.S
+++ b/newlib/libc/machine/h8300/memset.S
@@ -2,8 +2,6 @@
 
 #include "defines.h"
 
-#if defined (__H8300SX__)
-
 	.global	_memset
 _memset:
 	; Use er3 is a temporary since er0 must remain unchanged on exit.
@@ -15,7 +13,7 @@ _memset:
 
 	; Account for any excess bytes and words that will be copied after
 	; the main loop.  r2 >= 0 if there is a longword to copy.
-	sub	#4,LEN(r2)
+	SUBP	#4,LEN(r2)
 	blo	longs_done
 
 	; Copy one byte if doing so will make er3 word-aligned.
@@ -23,22 +21,37 @@ _memset:
 	; slightly faster.
 	bld	#0,r3l
 	bcc	word_aligned
+#if defined (__H8300SX__)
 	mov.b	r1l,@er3+
-	sub	#1,LEN(r2)
+#else
+	mov.b	r1l,@er3
+	ADDP	#1,LEN(r3)
+#endif
+	SUBP	#1,LEN(r2)
 	blo	longs_done
 
 word_aligned:
 	; Likewise one word for longword alignment.
 	bld	#1,r3l
 	bcc	long_copy
+#if defined (__H8300SX__)
 	mov.w	r1,@er3+
-	sub	#2,LEN(r2)
+#else
+	mov.w	r1,@er3
+	ADDP	#2,LEN(r3)
+#endif
+	SUBP	#2,LEN(r2)
 	blo	longs_done
 
 long_copy:
 	; Copy longwords.
+#if defined (__H8300SX)
 	mov.l	er1,@er3+
-	sub	#4,LEN(r2)
+#else
+	mov.l	er1,@er3
+	ADDP	#4,LEN(r3)
+#endif
+	SUBP	#4,LEN(r2)
 	bhs	long_copy
 
 longs_done:
@@ -46,57 +59,23 @@ longs_done:
 	; if necessary.
 	bld	#1,r2l
 	bcc	words_done
+#if defined(__H8300SX)
 	mov.w	r1,@er3+
+#else
+	mov.w	r1,@er3
+	ADDP	#2,LEN(r3)
+#endif
 
 words_done:
 	; Copy a byte.
 	bld	#0,r2l
 	bcc	bytes_done
+#if defined(__H8300SX__)
 	mov.b	r1l,@er3+
-
-bytes_done:
-	rts
-
 #else
+	mov.b	r1l,@er3
+	ADDP	#1,LEN(r3)
+#endif
 
-; A0P pointer to cursor
-; A1P thing to copy
-	.global	_memset
-
-_memset:
-
-;	MOVP	@(2/4,r7),A2P	; dst
-;	MOVP	@(4/8,r7),A1	; src thing
-;	MOVP	@(6/12,r7),A3P	; len
-
-	MOVP	A2P,A2P
-	beq	quit
-
-	; A3 points to the end of the area
-	MOVP	A0P,A3P
-	ADDP	A2P,A3P
-
-	; see if we can do it in words
-	; by oring in the start of the buffer to the end address
-
-	or	A0L,A2L
-	btst	#0,A2L
-	bne	byteloop
-	
-	; we can do it a word at a time
-
-	mov.b	A1L,A1H	
-
-wordloop:
-	mov.w	A1,@-A3P
-	CMPP	A3P,A0P
-	bne	wordloop
-quit:	rts	
-
-byteloop:
-	mov.b	A1L,@-A3P
-	CMPP	A3P,A0P
-	bne	byteloop
+bytes_done:
 	rts
-
-#endif
