commit 05c30cfe3e199a3ea4e114886df37145d7f3e096
Author: Raphael Moreira Zinsly <rzinsly@ventanamicro.com>
Date:   Thu Feb 23 12:39:36 2023 -0300

    RISC-V: Fix mult highpart cost
    
    RISC-V has an instruction to perform a mult highpart.
    
            gcc/Changelog:
    
                    * config/riscv/riscv.cc
                    (veyron_v1_tune_info) : Adjust int_div cost.
                    (riscv_rtx_costs): Add pattern to add mulh<u> cost.
                    * config/riscv/veyron-v1.md
                    (veyron_v1_idiv): Fix latency.
    
            gcc/testsuite/ChangeLog:
    
                    * gcc.target/riscv/int_div.c: New test.
    
    (cherry picked from commit 43ac549d9ee9c12ebc8afc08c352d13f6808b8bc)
    (cherry picked from commit 72d3c3852465f3737a849b933112bed163fb51b8)
    (cherry picked from commit ff56a441e1333534b6c46f4abf3cd836fb36ece4)
    (cherry picked from commit 00e205deef8f95f39e42c3cd25ddb3154fab09c2)
    (cherry picked from commit e1cc1919053c41069bdc7973bf4c54495036827e)

diff --git a/gcc/config/riscv/riscv.cc b/gcc/config/riscv/riscv.cc
index 44c508a4c31..4a885f9f177 100644
--- a/gcc/config/riscv/riscv.cc
+++ b/gcc/config/riscv/riscv.cc
@@ -4448,8 +4448,26 @@ riscv_rtx_costs (rtx x, machine_mode mode, int outer_code, int opno ATTRIBUTE_UN
 	  return true;
 	}
       gcc_fallthrough ();
-    case ASHIFTRT:
     case LSHIFTRT:
+      /* mulh[u] pattern */
+      if (GET_CODE (x) == LSHIFTRT
+	  && TARGET_MUL
+	  && mode == GET_MODE_2XWIDER_MODE (word_mode).require ()
+	  && outer_code == TRUNCATE
+	  && (GET_CODE (XEXP (x, 0)) == MULT)
+	     && (GET_CODE (XEXP (XEXP (x, 0), 0)) == ZERO_EXTEND
+		 || GET_CODE (XEXP (XEXP (x, 0), 0)) == SIGN_EXTEND)
+	     && (GET_CODE (XEXP (XEXP (x, 0), 1)) == ZERO_EXTEND
+		 || GET_CODE (XEXP (XEXP (x, 0), 1)) == SIGN_EXTEND)
+	  && (GET_CODE (XEXP (x, 1)) == CONST_INT
+	      && INTVAL (XEXP (x, 1)) == BITS_PER_WORD))
+	{
+	  *total = COSTS_N_INSNS (1);
+	  return true;
+	}
+	/* Fall through.  */
+
+    case ASHIFTRT:
       *total = riscv_binary_cost (x, SINGLE_SHIFT_COST,
 				  CONSTANT_P (XEXP (x, 1)) ? 4 : 9);
       return false;
diff --git a/gcc/testsuite/gcc.target/riscv/int_div.c b/gcc/testsuite/gcc.target/riscv/int_div.c
new file mode 100644
index 00000000000..7932cb9a590
--- /dev/null
+++ b/gcc/testsuite/gcc.target/riscv/int_div.c
@@ -0,0 +1,13 @@
+/* { dg-do compile } */
+/* { dg-options "-march=rv64gc -mabi=lp64d" { target rv64 } } */
+/* { dg-options "-march=rv32gc -mabi=ilp32" { target rv32 } } */
+/* { dg-skip-if "" { *-*-* } { "-Os" "-Oz" } } */
+
+long
+foo (long x)
+{
+  return x / 10000L;
+}
+
+/* { dg-final { scan-assembler-times "mulh" 1 } } */
+/* { dg-final { scan-assembler-not "\tdiv\t" } } */
