diff --git a/gcc/config/nds32/nds32-fp-as-gp.c b/gcc/config/nds32/nds32-fp-as-gp.c
index 278df99bc74..b245b1b1cd3 100644
--- a/gcc/config/nds32/nds32-fp-as-gp.cc
+++ b/gcc/config/nds32/nds32-fp-as-gp.cc
@@ -101,6 +101,10 @@ nds32_get_symbol_count (void)
 static bool
 nds32_fp_as_gp_check_available (void)
 {
+  /* I'm getting occasional failures from the linker with
+     this opt.  Disable for now.  */
+  return false;
+
   basic_block bb;
   basic_block exit_bb;
   edge_iterator ei;
This is a hack and should never be upstreamed
There's either a length accounting problem or alignment accounting problem
that shows up building newlib.
diff --git a/gcc/config/bfin/bfin.md b/gcc/config/bfin/bfin.md
index c6b174dc3bd..983a95a4c38 100644
--- a/gcc/config/bfin/bfin.md
+++ b/gcc/config/bfin/bfin.md
@@ -384,7 +384,7 @@ (define_attr "length" ""
          (eq_attr "type" "brcc")
 	 (cond [(and
 	            (le (minus (match_dup 3) (pc)) (const_int 1020))
-	            (ge (minus (match_dup 3) (pc)) (const_int -1024)))
+	            (ge (minus (match_dup 3) (pc)) (const_int -952)))
 		  (const_int 2)
 		(and
 	            (le (minus (match_dup 3) (pc)) (const_int 4092))
diff --git a/gcc/config/rx/rx.cc b/gcc/config/rx/rx.cc
index 0754e286552..a2cffa0e0af 100644
--- a/gcc/config/rx/rx.cc
+++ b/gcc/config/rx/rx.cc
@@ -2791,6 +2791,7 @@ rx_override_options_after_change (void)
 
       first_time = FALSE;
     }
+#if 0
   else
     {
       /* Alert the user if they are changing the optimization options
@@ -2799,6 +2800,7 @@ rx_override_options_after_change (void)
 	  && !flag_finite_math_only)
 	warning (0, "RX FPU instructions do not support NaNs and infinities");
     }
+#endif
 }
 
 static void
diff --git a/gcc/config/msp430/constraints.md b/gcc/config/msp430/constraints.md
index 9dd28b106fb..a09d936c545 100644
--- a/gcc/config/msp430/constraints.md
+++ b/gcc/config/msp430/constraints.md
@@ -29,10 +29,11 @@ (define_constraint "K"
   (and (match_code "const_int")
        (match_test "IN_RANGE (ival, 1, 19)")))
 
+;; The +1 to narrow the range slightly due to gas bug
 (define_constraint "L"
   "Integer constant -1^20..1^19."
   (and (match_code "const_int")
-       (match_test "IN_RANGE (ival, HOST_WIDE_INT_M1U << 20, 1 << 19)")))
+       (match_test "IN_RANGE (ival, -(1 << 19) + 1, 1 << 19)")))
 
 ;; Valid shift amount for RRUM, RRAM, RLAM, RRCM.
 (define_constraint "M"
diff --git a/gcc/config/mcore/mcore.cc b/gcc/config/mcore/mcore.cc
index cd5f2c52649..bdc1b40a153 100644
--- a/gcc/config/mcore/mcore.cc
+++ b/gcc/config/mcore/mcore.cc
@@ -202,7 +202,7 @@ TARGET_GNU_ATTRIBUTES (mcore_attribute_table,
 #define TARGET_MACHINE_DEPENDENT_REORG	mcore_reorg
 
 #undef  TARGET_PROMOTE_FUNCTION_MODE
-#define TARGET_PROMOTE_FUNCTION_MODE	default_promote_function_mode_always_promote
+#define TARGET_PROMOTE_FUNCTION_MODE	default_promote_function_mode
 #undef  TARGET_PROMOTE_PROTOTYPES
 #define TARGET_PROMOTE_PROTOTYPES	hook_bool_const_tree_true
 
