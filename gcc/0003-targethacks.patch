diff --git a/gcc/config/nds32/nds32-fp-as-gp.c b/gcc/config/nds32/nds32-fp-as-gp.c
index 278df99bc74..b245b1b1cd3 100644
--- a/gcc/config/nds32/nds32-fp-as-gp.cc
+++ b/gcc/config/nds32/nds32-fp-as-gp.cc
@@ -101,6 +101,10 @@ nds32_get_symbol_count (void)
 static bool
 nds32_fp_as_gp_check_available (void)
 {
+  /* I'm getting occasional failures from the linker with
+     this opt.  Disable for now.  */
+  return false;
+
   basic_block bb;
   basic_block exit_bb;
   edge_iterator ei;
This is a hack and should never be upstreamed
There's either a length accounting problem or alignment accounting problem
that shows up building newlib.
diff --git a/gcc/config/bfin/bfin.md b/gcc/config/bfin/bfin.md
index c6b174dc3bd..983a95a4c38 100644
--- a/gcc/config/bfin/bfin.md
+++ b/gcc/config/bfin/bfin.md
@@ -384,7 +384,7 @@ (define_attr "length" ""
          (eq_attr "type" "brcc")
 	 (cond [(and
 	            (le (minus (match_dup 3) (pc)) (const_int 1020))
-	            (ge (minus (match_dup 3) (pc)) (const_int -1024)))
+	            (ge (minus (match_dup 3) (pc)) (const_int -952)))
 		  (const_int 2)
 		(and
 	            (le (minus (match_dup 3) (pc)) (const_int 4092))
diff --git a/gcc/config/rx/rx.cc b/gcc/config/rx/rx.cc
index 0754e286552..a2cffa0e0af 100644
--- a/gcc/config/rx/rx.cc
+++ b/gcc/config/rx/rx.cc
@@ -2791,6 +2791,7 @@ rx_override_options_after_change (void)
 
       first_time = FALSE;
     }
+#if 0
   else
     {
       /* Alert the user if they are changing the optimization options
@@ -2799,6 +2800,7 @@ rx_override_options_after_change (void)
 	  && !flag_finite_math_only)
 	warning (0, "RX FPU instructions do not support NaNs and infinities");
     }
+#endif
 }
 
 static void
diff --git a/gcc/config/msp430/constraints.md b/gcc/config/msp430/constraints.md
index 9dd28b106fb..a09d936c545 100644
--- a/gcc/config/msp430/constraints.md
+++ b/gcc/config/msp430/constraints.md
@@ -29,10 +29,11 @@ (define_constraint "K"
   (and (match_code "const_int")
        (match_test "IN_RANGE (ival, 1, 19)")))
 
+;; The +1 to narrow the range slightly due to gas bug
 (define_constraint "L"
   "Integer constant -1^20..1^19."
   (and (match_code "const_int")
-       (match_test "IN_RANGE (ival, HOST_WIDE_INT_M1U << 20, 1 << 19)")))
+       (match_test "IN_RANGE (ival, -(1 << 19) + 1, 1 << 19)")))
 
 ;; Valid shift amount for RRUM, RRAM, RLAM, RRCM.
 (define_constraint "M"
diff --git a/gcc/config/mcore/mcore.cc b/gcc/config/mcore/mcore.cc
index cd5f2c52649..bdc1b40a153 100644
--- a/gcc/config/mcore/mcore.cc
+++ b/gcc/config/mcore/mcore.cc
@@ -202,7 +202,7 @@ TARGET_GNU_ATTRIBUTES (mcore_attribute_table,
 #define TARGET_MACHINE_DEPENDENT_REORG	mcore_reorg
 
 #undef  TARGET_PROMOTE_FUNCTION_MODE
-#define TARGET_PROMOTE_FUNCTION_MODE	default_promote_function_mode_always_promote
+#define TARGET_PROMOTE_FUNCTION_MODE	default_promote_function_mode
 #undef  TARGET_PROMOTE_PROTOTYPES
 #define TARGET_PROMOTE_PROTOTYPES	hook_bool_const_tree_true
 
diff --git a/gcc/config/iq2000/iq2000.cc b/gcc/config/iq2000/iq2000.cc
index b69ee8f59b3..897c36c01ed 100644
--- a/gcc/config/iq2000/iq2000.cc
+++ b/gcc/config/iq2000/iq2000.cc
@@ -209,7 +209,7 @@ static HOST_WIDE_INT iq2000_starting_frame_offset (void);
 #define TARGET_PRINT_OPERAND_PUNCT_VALID_P iq2000_print_operand_punct_valid_p
 
 #undef  TARGET_PROMOTE_FUNCTION_MODE
-#define TARGET_PROMOTE_FUNCTION_MODE	default_promote_function_mode_always_promote
+#define TARGET_PROMOTE_FUNCTION_MODE	default_promote_function_mode
 #undef  TARGET_PROMOTE_PROTOTYPES
 #define TARGET_PROMOTE_PROTOTYPES	hook_bool_const_tree_true
 
commit 0ec2f586c8ee027586c373fe4f19ceb3a7c680c6
Author: Jeff Law <jlaw@ventanamicro.com>
Date:   Wed Feb 21 11:08:35 2024 -0700

    Revert "libiberty: Fix error return value in pex_unix_exec_child [PR113957]."
    
    This reverts commit 20e57660e64eab7c9ef0f2dd25f3088835f8f44f.

diff --git a/libiberty/pex-unix.c b/libiberty/pex-unix.c
index f3a1cc95ada..4b004f5a9cc 100644
--- a/libiberty/pex-unix.c
+++ b/libiberty/pex-unix.c
@@ -58,9 +58,6 @@ extern int errno;
 #ifdef HAVE_PROCESS_H
 #include <process.h>
 #endif
-#ifdef HAVE_SPAWN_H
-#include <spawn.h>
-#endif
 
 #ifdef vfork /* Autoconf may define this to fork for us. */
 # define VFORK_STRING "fork"
@@ -308,8 +305,8 @@ static pid_t pex_unix_exec_child (struct pex_obj *, int, const char *,
 				 int, int, int, int,
 				 const char **, int *);
 static int pex_unix_close (struct pex_obj *, int);
-static pid_t pex_unix_wait (struct pex_obj *, pid_t, int *, struct pex_time *,
-			   int, const char **, int *);
+static int pex_unix_wait (struct pex_obj *, pid_t, int *, struct pex_time *,
+			  int, const char **, int *);
 static int pex_unix_pipe (struct pex_obj *, int *, int);
 static FILE *pex_unix_fdopenr (struct pex_obj *, int, int);
 static FILE *pex_unix_fdopenw (struct pex_obj *, int, int);
@@ -562,173 +559,6 @@ pex_unix_exec_child (struct pex_obj *obj ATTRIBUTE_UNUSED,
   return (pid_t) -1;
 }
 
-#elif defined(HAVE_POSIX_SPAWN) && defined(HAVE_POSIX_SPAWNP)
-/* Implementation of pex->exec_child using posix_spawn.            */
-
-static pid_t
-pex_unix_exec_child (struct pex_obj *obj ATTRIBUTE_UNUSED,
-		     int flags, const char *executable,
-		     char * const * argv, char * const * env,
-		     int in, int out, int errdes,
-		     int toclose, const char **errmsg, int *err)
-{
-  int ret;
-  pid_t pid = -1;
-  posix_spawnattr_t attr;
-  posix_spawn_file_actions_t actions;
-  int attr_initialized = 0, actions_initialized = 0;
-
-  *err = 0;
-
-  ret = posix_spawnattr_init (&attr);
-  if (ret)
-    {
-      *err = ret;
-      *errmsg = "posix_spawnattr_init";
-      goto exit;
-    }
-  attr_initialized = 1;
-
-  /* Use vfork() on glibc <=2.24. */
-#ifdef POSIX_SPAWN_USEVFORK
-  ret = posix_spawnattr_setflags (&attr, POSIX_SPAWN_USEVFORK);
-  if (ret)
-    {
-      *err = ret;
-      *errmsg = "posix_spawnattr_setflags";
-      goto exit;
-    }
-#endif
-
-  ret = posix_spawn_file_actions_init (&actions);
-  if (ret)
-    {
-      *err = ret;
-      *errmsg = "posix_spawn_file_actions_init";
-      goto exit;
-    }
-  actions_initialized = 1;
-
-  if (in != STDIN_FILE_NO)
-    {
-      ret = posix_spawn_file_actions_adddup2 (&actions, in, STDIN_FILE_NO);
-      if (ret)
-	{
-	  *err = ret;
-	  *errmsg = "posix_spawn_file_actions_adddup2";
-	  goto exit;
-	}
-
-      ret = posix_spawn_file_actions_addclose (&actions, in);
-      if (ret)
-	{
-	  *err = ret;
-	  *errmsg = "posix_spawn_file_actions_addclose";
-	  goto exit;
-	}
-    }
-
-  if (out != STDOUT_FILE_NO)
-    {
-      ret = posix_spawn_file_actions_adddup2 (&actions, out, STDOUT_FILE_NO);
-      if (ret)
-	{
-	  *err = ret;
-	  *errmsg = "posix_spawn_file_actions_adddup2";
-	  goto exit;
-	}
-
-      ret = posix_spawn_file_actions_addclose (&actions, out);
-      if (ret)
-	{
-	  *err = ret;
-	  *errmsg = "posix_spawn_file_actions_addclose";
-	  goto exit;
-	}
-    }
-
-  if (errdes != STDERR_FILE_NO)
-    {
-      ret = posix_spawn_file_actions_adddup2 (&actions, errdes, STDERR_FILE_NO);
-      if (ret)
-	{
-	  *err = ret;
-	  *errmsg = "posix_spawn_file_actions_adddup2";
-	  goto exit;
-	}
-
-      ret = posix_spawn_file_actions_addclose (&actions, errdes);
-      if (ret)
-	{
-	  *err = ret;
-	  *errmsg = "posix_spawn_file_actions_addclose";
-	  goto exit;
-	}
-    }
-
-  if (toclose >= 0)
-    {
-      ret = posix_spawn_file_actions_addclose (&actions, toclose);
-      if (ret)
-	{
-	  *err = ret;
-	  *errmsg = "posix_spawn_file_actions_addclose";
-	  goto exit;
-	}
-    }
-
-  if ((flags & PEX_STDERR_TO_STDOUT) != 0)
-    {
-      ret = posix_spawn_file_actions_adddup2 (&actions, STDOUT_FILE_NO, STDERR_FILE_NO);
-      if (ret)
-	{
-	  *err = ret;
-	  *errmsg = "posix_spawn_file_actions_adddup2";
-	  goto exit;
-	}
-    }
-
-  if ((flags & PEX_SEARCH) != 0)
-    {
-      ret = posix_spawnp (&pid, executable, &actions, &attr, argv, env ? env : environ);
-      if (ret)
-	{
-	  *err = ret;
-	  *errmsg = "posix_spawnp";
-	  pid = -1; /* The value of pid is unspecified on failure.  */
-	  goto exit;
-	}
-    }
-  else
-    {
-      ret = posix_spawn (&pid, executable, &actions, &attr, argv, env ? env : environ);
-      if (ret)
-	{
-	  *err = ret;
-	  *errmsg = "posix_spawn";
-	  pid = -1;
-	  goto exit;
-	}
-    }
-
-exit:
-  if (actions_initialized)
-    posix_spawn_file_actions_destroy (&actions);
-  if (attr_initialized)
-    posix_spawnattr_destroy (&attr);
-
-  if (!*err && in != STDIN_FILE_NO)
-    if (close (in))
-      *errmsg = "close", *err = errno, pid = -1;
-  if (!*err && out != STDOUT_FILE_NO)
-    if (close (out))
-      *errmsg = "close", *err = errno, pid = -1;
-  if (!*err && errdes != STDERR_FILE_NO)
-    if (close (errdes))
-      *errmsg = "close", *err = errno, pid = -1;
-
-  return pid;
-}
 #else
 /* Implementation of pex->exec_child using standard vfork + exec.  */
 
@@ -936,7 +766,7 @@ pex_unix_exec_child (struct pex_obj *obj, int flags, const char *executable,
 
 /* Wait for a child process to complete.  */
 
-static pid_t
+static int
 pex_unix_wait (struct pex_obj *obj, pid_t pid, int *status,
 	       struct pex_time *time, int done, const char **errmsg,
 	       int *err)


The problem was caused by an erroneous note about creating a stack frame,
which caused the cur_cfa reg to fail to assert with a value other than
the frame pointer.

This fix will generate notes that correctly update cur_cfa.

gcc/config/rx/
	* rx.cc (add_pop_cfi_notes): Release the frame pointer if it is used.
	(rx_expand_prologue): Redesigned stack pointer and frame pointer update process.

Signed-off-by: Yoshinori Sato <yoshinori.sato@nifty.com>
---
 gcc/config/rx/rx.cc | 49 ++++++++++++++++-----------------------------
 1 file changed, 17 insertions(+), 32 deletions(-)

diff --git a/gcc/config/rx/rx.cc b/gcc/config/rx/rx.cc
index dd730dca3c0..c5638817d08 100644
--- a/gcc/config/rx/rx.cc
+++ b/gcc/config/rx/rx.cc
@@ -1648,16 +1648,20 @@ mark_frame_related (rtx insn)
 static void
 add_pop_cfi_notes (rtx_insn *insn, unsigned int high, unsigned int low)
 {
-  rtx t = plus_constant (Pmode, stack_pointer_rtx,
-                        (high - low + 1) * UNITS_PER_WORD);
+  rtx src = stack_pointer_rtx;
+  rtx t;
+  for (unsigned int i = low; i <= high; i++)
+    {
+      add_reg_note (insn, REG_CFA_RESTORE, gen_rtx_REG (word_mode, i));
+      if (i == FRAME_POINTER_REGNUM && frame_pointer_needed)
+	src = frame_pointer_rtx;
+    }
+  t = plus_constant (Pmode, src, (high - low + 1) * UNITS_PER_WORD);
   t = gen_rtx_SET (stack_pointer_rtx, t);
   add_reg_note (insn, REG_CFA_ADJUST_CFA, t);
   RTX_FRAME_RELATED_P (insn) = 1;
-  for (unsigned int i = low; i <= high; i++)
-    add_reg_note (insn, REG_CFA_RESTORE, gen_rtx_REG (word_mode, i));
 }
 
-
 static bool
 ok_for_max_constant (HOST_WIDE_INT val)
 {
@@ -1816,36 +1820,17 @@ rx_expand_prologue (void)
 	}
     }
 
-  /* If needed, set up the frame pointer.  */
-  if (frame_pointer_needed)
-    gen_safe_add (frame_pointer_rtx, stack_pointer_rtx,
-		  GEN_INT (- (HOST_WIDE_INT) frame_size), true);
-
-  /* Allocate space for the outgoing args.
-     If the stack frame has not already been set up then handle this as well.  */
-  if (stack_size)
+  if (stack_size || frame_size)
     {
-      if (frame_size)
-	{
-	  if (frame_pointer_needed)
-	    gen_safe_add (stack_pointer_rtx, frame_pointer_rtx,
-			  GEN_INT (- (HOST_WIDE_INT) stack_size), true);
-	  else
-	    gen_safe_add (stack_pointer_rtx, stack_pointer_rtx,
-			  GEN_INT (- (HOST_WIDE_INT) (frame_size + stack_size)),
-			  true);
-	}
-      else
-	gen_safe_add (stack_pointer_rtx, stack_pointer_rtx,
-		      GEN_INT (- (HOST_WIDE_INT) stack_size), true);
+      gen_safe_add (stack_pointer_rtx, stack_pointer_rtx,
+		    GEN_INT (- (HOST_WIDE_INT) (stack_size + frame_size)),
+		    true);
     }
-  else if (frame_size)
+  if (frame_pointer_needed)
     {
-      if (! frame_pointer_needed)
-	gen_safe_add (stack_pointer_rtx, stack_pointer_rtx,
-		      GEN_INT (- (HOST_WIDE_INT) frame_size), true);
-      else
-	gen_safe_add (stack_pointer_rtx, frame_pointer_rtx, NULL_RTX, true);
+      gen_safe_add (frame_pointer_rtx, stack_pointer_rtx,
+		    GEN_INT ((HOST_WIDE_INT) stack_size),
+		    true);
     }
 }
 
-- 
2.47.2

