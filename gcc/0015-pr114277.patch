diff --git a/gcc/expr.cc b/gcc/expr.cc
index a310b2d9131..435ee9d2650 100644
--- a/gcc/expr.cc
+++ b/gcc/expr.cc
@@ -10327,6 +10327,7 @@ expand_expr_real_2 (const_sepops ops, rtx target, machine_mode tmode,
 
       expand_operands (treeop0, treeop1, subtarget, &op0, &op1, EXPAND_NORMAL);
 
+  zero_one_mult:
       /* Expand X*Y as X&-Y when Y must be zero or one.  */
       if (SCALAR_INT_MODE_P (mode))
 	{
@@ -11038,6 +11039,18 @@ expand_expr_real_2 (const_sepops ops, rtx target, machine_mode tmode,
 	if (temp)
 	  return temp;
 
+	if (!can_conditionally_move_p (mode))
+	  {
+	    /* Fallback to the multiplication that got simplified on gimple.  */
+	    op2 = expand_normal (treeop2);
+	    if (op2 == const0_rtx)
+	      {
+		op0 = expand_normal (treeop0);
+		op1 = expand_normal (treeop1);
+		goto zero_one_mult;
+	      }
+	  }
+
 	/* If we are not to produce a result, we have no target.  Otherwise,
 	   if a target was specified use it; it will not be used as an
 	   intermediate target unless it is safe.  If no target, use a
diff --git a/gcc/match.pd b/gcc/match.pd
index 17193087498..a217e52a8b9 100644
--- a/gcc/match.pd
+++ b/gcc/match.pd
@@ -11263,3 +11263,14 @@ and,
       }
       (if (full_perm_p)
 	(vec_perm (op@3 @0 @1) @3 @2))))))
+
+#if GIMPLE
+ /* Multiplication by a zero_one_valued_p operand can be simplified to a
+    conditional move. 
+
+    Note we don't want to go this on generic since @1 might hav side effects
+    that we must preserve.  */
+ (simplify
+  (mult:c (convert? zero_one_valued_p@0) @1)
+  (cond  @0 (convert @1) {build_zero_cst (TREE_TYPE (@1)); }))
+#endif
diff --git a/gcc/testsuite/gcc.target/i386/pr114277.c b/gcc/testsuite/gcc.target/i386/pr114277.c
new file mode 100644
index 00000000000..f74caf2d9f5
--- /dev/null
+++ b/gcc/testsuite/gcc.target/i386/pr114277.c
@@ -0,0 +1,11 @@
+/* { dg-do compile } */
+/* { dg-options "-O2" } */
+
+int a,b;
+void func(int x){
+    a=x*(x||b);
+}
+
+/* { dg-final { scan-assembler-not "or" } } */
+/* { dg-final { scan-assembler-not "cmove" } } */
+
diff --git a/gcc/testsuite/gcc.target/riscv/pr111126.c b/gcc/testsuite/gcc.target/riscv/pr111126.c
new file mode 100644
index 00000000000..f305c31eb4d
--- /dev/null
+++ b/gcc/testsuite/gcc.target/riscv/pr111126.c
@@ -0,0 +1,36 @@
+/* { dg-do compile } */
+/* { dg-options "-march=rv64gc_zicond -mabi=lp64d" { target rv64 } } 
+/* { dg-options "-march=rv32gc_zicond -mabi=ilp32" { target rv32 } } 
+/* { dg-skip-if "" { *-*-* } { "-O0" "-O1" "-Os" "-Oz" "-O3" "-Og" } } */
+
+int f(bool a, int c)
+{
+  return a * c;
+}
+
+int f0(bool a, int c)
+{
+  return (-a) & c;
+}
+
+int f1(bool a, int c)
+{
+  return a ? c : 0;
+}
+
+int f3(int a, int b, int c)
+{
+  return (a == b) * c;
+}
+int g0(bool a, int c)
+{
+  return a ? 0 : c;
+}
+int g1(bool a, int c)
+{
+  a = !a;
+  return a * c;
+}
+
+/* { dg-final { scan-assembler-times "czero" 6 } } */
+
diff --git a/gcc/testsuite/gcc.target/riscv/pr114277.c b/gcc/testsuite/gcc.target/riscv/pr114277.c
new file mode 100644
index 00000000000..10e63babcf3
--- /dev/null
+++ b/gcc/testsuite/gcc.target/riscv/pr114277.c
@@ -0,0 +1,10 @@
+/* { dg-do compile } */
+/* { dg-options "-O2 -march=rv64gc_zicond -mabi=lp64d" { target rv64 } } */
+/* { dg-options "-O2 -march=rv32gc_zicond -mabi=ilp32" { target rv32 } } */
+/* { dg-skip-if "" { *-*-* } { "-O0" "-O1" "-Os" "-Oz" "-O3" "-Og" } } */
+int a,b;
+void func(int x){
+    a=x*(x||b);
+}
+/* { dg-final { scan-assembler-not "czero" } } */
+
diff --git a/gcc/testsuite/gcc.target/riscv/pr118384.c b/gcc/testsuite/gcc.target/riscv/pr118384.c
new file mode 100644
index 00000000000..dae65a3d28c
--- /dev/null
+++ b/gcc/testsuite/gcc.target/riscv/pr118384.c
@@ -0,0 +1,25 @@
+/* { dg-do compile } */
+/* { dg-options "-O2 -march=rv64gc_zicond -mabi=lp64d" { target rv64 } } */
+/* { dg-options "-O2 -march=rv32gc_zicond -mabi=ilp32" { target rv32 } } */
+/* { dg-skip-if "" { *-*-* } { "-O0" "-O1" "-Os" "-Oz" "-O3" "-Og" } } */
+
+#include <stdint-gcc.h>
+uint64_t muldi3(uint64_t a, uint64_t b)
+{
+
+    uint64_t Product;
+
+    Product = 0;
+    while (a) {
+        if (a & 1) {
+            Product += b;
+        }
+        a >>= 1;
+        b <<= 1;
+    }
+
+    return Product;
+}
+
+/* { dg-final { scan-assembler-times "czero" 1 } } */
+
