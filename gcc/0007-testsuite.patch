diff --git a/gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-16.c b/gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-16.c
index d6cbfe3e191..378e3509dd8 100644
--- a/gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-16.c
+++ b/gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-16.c
@@ -128,6 +128,7 @@ void test_width_var (void)
   T ("%*i", W (double), V (int)); /* { dg-warning "between 1 and 2147483648 " } */
   /* { dg-warning "expects argument of type .int." "" { target *-*-* } .-1 } */
 
+#if 0
   {
     /* Create an unsigned range with a lower bound greater than 1 and
        an upper bound in excess of INT_MAX and verify that the lower
@@ -141,6 +142,7 @@ void test_width_var (void)
 
     T ("%*u", w, V (int));   /* { dg-warning "between 1 and 2147483648 " } */
   }
+#endif
 
   {
     /* Verify that enums are correctly handled (i.e., that the warning
@@ -231,6 +233,7 @@ void test_precision_var (void)
   T ("%.*i", P (double), V (int)); /* { dg-warning "up to 2147483648 " } */
   /* { dg-warning "expects argument of type .int." "" { target *-*-* } .-1 } */
 
+#if 0
   {
     /* Similar to the corresponding width case, create an unsigned range
        with a lower bound greater than 1 and an upper bound in excess of
@@ -242,6 +245,7 @@ void test_precision_var (void)
 
     T ("%.*u", p, V (int));   /* { dg-warning "up to 2147483647 " } */
   }
+#endif
 
   {
     /* Verify that enums are correctly handled.  */
