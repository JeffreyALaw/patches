diff --git a/gcc/ext-dce.cc b/gcc/ext-dce.cc
index df17b018bf1f..ecec2fac92e3 100644
--- a/gcc/ext-dce.cc
+++ b/gcc/ext-dce.cc
@@ -761,11 +761,15 @@ ext_dce_process_uses (rtx_insn *insn, rtx obj,
 		  else if (SUBREG_P (y) && SUBREG_BYTE (y).is_constant ())
 		    {
 		      /* We really want to know the outer code here, ie do we
-			 have (ANY_EXTEND (SUBREG ...)) as we need to know if
-			 the extension matches the SUBREG_PROMOTED state.  In
-			 that case optimizers can turn the extension into a
-			 simple copy.  Which means that bits outside the
-			 SUBREG's mode are actually live.
+			 have (ANY_EXTEND (SUBREG ...)) as the optimizers
+			 can turn those cases into copies or otherwise simplify
+			 then when they feed other expressions based on the
+			 sign bit copies and such.  Those transformations
+			 imply there are bits outside the SUBREG's mode that
+			 are actually live.
+
+			 Similarly if we have a simple copy from a promoted
+			 SUBREG.
 
 			 We don't want to mark those bits live unnecessarily
 			 as that inhibits extension elimination in important
@@ -782,10 +786,9 @@ ext_dce_process_uses (rtx_insn *insn, rtx obj,
 			 regardless of the outer code.  See PR 120050.  */
 		      if (!REG_P (SUBREG_REG (y))
 			  || (SUBREG_PROMOTED_VAR_P (y)
-			      && ((GET_CODE (SET_SRC (x)) == SIGN_EXTEND
-				   && SUBREG_PROMOTED_SIGNED_P (y))
-				  || (GET_CODE (SET_SRC (x)) == ZERO_EXTEND
-				      && SUBREG_PROMOTED_UNSIGNED_P (y))
+			      && (GET_CODE (SET_SRC (x)) == SIGN_EXTEND
+				  || GET_CODE (SET_SRC (x)) == ZERO_EXTEND
+				  || SET_SRC (x) == y
 				  || !TRULY_NOOP_TRUNCATION_MODES_P (
 					GET_MODE (y),
 					GET_MODE (SUBREG_REG (y))))))
diff --git a/gcc/testsuite/gcc.dg/torture/pr120242.c b/gcc/testsuite/gcc.dg/torture/pr120242.c
new file mode 100644
index 000000000000..2d0f7dedd033
--- /dev/null
+++ b/gcc/testsuite/gcc.dg/torture/pr120242.c
@@ -0,0 +1,30 @@
+/* { dg-do run } */
+/* { dg-additional-options "-fsigned-char -fno-strict-aliasing -fwrapv" } */
+
+char f1(char a, char b) {
+  return b == 0 ? a : b;
+}
+int f2(int a, int b) {
+  return b ? a : 0;
+}
+struct l {
+  unsigned m;
+  int n;
+};
+struct l ae;
+char af = -2;
+unsigned ah = 4;
+int aj = 8;
+int *test = &aj;
+int main() {
+ao:
+  if (f2(f1(4, af++), *test) <= 0) {
+    for (; ae.n; ae.n++)
+      ;
+    if (ah)
+      goto ao;
+  }
+  if (af != 1)
+    __builtin_abort ();
+  __builtin_exit (0);
+}
diff --git a/gcc/testsuite/gcc.dg/torture/pr120627.c b/gcc/testsuite/gcc.dg/torture/pr120627.c
new file mode 100644
index 000000000000..f83cd533b8b3
--- /dev/null
+++ b/gcc/testsuite/gcc.dg/torture/pr120627.c
@@ -0,0 +1,27 @@
+/* { dg-do compile } */
+/* { dg-additional-options "-fsigned-char -fno-strict-aliasing -fwrapv" } */
+
+unsigned char sub(unsigned char t, unsigned char u) { return t - u; }
+unsigned char mul(unsigned char t, unsigned char u) { return t * u; }
+int x(int aa, int ab) {
+  return ab >= 32 || aa > 18446744073709551615UL >> ab ? aa : aa << ab;
+}
+int ag;
+int ah = 249;
+char ap;
+static short ar[5][9];
+int *as = &ag;
+void bf(char cf) {
+  for (; ap <= 8; ap++) {
+    (ar[1][7] = mul(x(-1L, sub(cf, 247) / cf), ag <= 0)) || ar[1][4]++;
+    *as = ag;
+  }
+  return;
+}
+int main() {
+  bf(ah);
+  if (ar[1][7] != 255)
+    __builtin_abort ();
+  __builtin_exit (0);
+}
+
diff --git a/gcc/testsuite/gcc.dg/torture/pr120736.c b/gcc/testsuite/gcc.dg/torture/pr120736.c
new file mode 100644
index 000000000000..84f808a5992b
--- /dev/null
+++ b/gcc/testsuite/gcc.dg/torture/pr120736.c
@@ -0,0 +1,21 @@
+/* { dg-do run } */
+/* { dg-additional-options "-fsigned-char -fno-strict-aliasing -fwrapv" } */
+
+unsigned char aa (unsigned char ab, int o) { return ab > o ? ab : 0; }
+int p;
+int s;
+static unsigned char q = 255;
+int r;
+int *v = &s;
+int main() {
+  p = v != 0;
+  for (; r < 8; ++r) {
+    if (s)
+      break;
+    s = aa(p * q++, 6) <= 0;
+  }
+  if (q != 1)
+    __builtin_abort ();
+  __builtin_exit (0);
+}
+
diff --git a/gcc/testsuite/gcc.dg/torture/pr120813.c b/gcc/testsuite/gcc.dg/torture/pr120813.c
new file mode 100644
index 000000000000..f43f45fb571f
--- /dev/null
+++ b/gcc/testsuite/gcc.dg/torture/pr120813.c
@@ -0,0 +1,27 @@
+/* { dg-do run } */
+/* { dg-additional-options "-fsigned-char -fno-strict-aliasing -fwrapv" } */
+
+short s (short t, short u) { return u == 0 ? 0 : t / u; }
+int x[6];
+int y;
+unsigned ak = 1;
+unsigned short al = 65527;
+unsigned *am = &ak;
+int main() {
+  for (int i = 0; i < 6; i++) {
+    x[i] = i;
+  }
+  for (;;) {
+    unsigned ar = 2080554998;
+    char as = 4;
+    if (s(34, al++) < ar)
+      if (*am)
+        break;
+  }
+  y = x[al & 5];
+  if ((y ^ 5UL) != 4)
+    __builtin_abort ();
+  __builtin_exit (0);
+}
+
+
