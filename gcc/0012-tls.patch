commit 4d07ee4d6e632956df13e57f031c0184f36abb16
Author: Jeff Law <jeffreyalaw@gmail.com>
Date:   Fri Oct 21 16:03:25 2022 -0400

    Revert "ipa-visibility: Optimize TLS access [PR99619]"
    
    This reverts commit 1d561e1851c466a4952081caef17747781609b00.

diff --git a/gcc/ipa-visibility.cc b/gcc/ipa-visibility.cc
index 3ed2b7cf679..8a27e7bcdfd 100644
--- a/gcc/ipa-visibility.cc
+++ b/gcc/ipa-visibility.cc
@@ -873,25 +873,6 @@ function_and_variable_visibility (bool whole_program)
 	}
     }
 
-  if (symtab->state >= IPA_SSA)
-    {
-      FOR_EACH_VARIABLE (vnode)
-	{
-	  tree decl = vnode->decl;
-
-	  /* Upgrade TLS access model based on optimized visibility status,
-	     unless it was specified explicitly or no references remain.  */
-	  if (DECL_THREAD_LOCAL_P (decl)
-	      && !lookup_attribute ("tls_model", DECL_ATTRIBUTES (decl))
-	      && vnode->ref_list.referring.length ())
-	    {
-	      enum tls_model new_model = decl_default_tls_model (decl);
-	      gcc_checking_assert (new_model >= decl_tls_model (decl));
-	      set_decl_tls_model (decl, new_model);
-	    }
-	}
-    }
-
   if (dump_file)
     {
       fprintf (dump_file, "\nMarking local functions:");
diff --git a/gcc/testsuite/gcc.dg/tls/vis-attr-gd.c b/gcc/testsuite/gcc.dg/tls/vis-attr-gd.c
deleted file mode 100644
index 89a248a8028..00000000000
--- a/gcc/testsuite/gcc.dg/tls/vis-attr-gd.c
+++ /dev/null
@@ -1,12 +0,0 @@
-/* { dg-do compile } */
-/* { dg-require-effective-target fpic } */
-/* { dg-require-effective-target tls } */
-/* { dg-options "-O2 -fPIC -fdump-ipa-whole-program" } */
-
-// tls_model should be global-dynamic due to explicitly specified attribute
-__attribute__((tls_model("global-dynamic")))
-__thread int x;
-
-void reference() { x++; }
-
-/* { dg-final { scan-ipa-dump "Varpool flags: tls-global-dynamic" "whole-program" } } */
diff --git a/gcc/testsuite/gcc.dg/tls/vis-attr-hidden-gd.c b/gcc/testsuite/gcc.dg/tls/vis-attr-hidden-gd.c
deleted file mode 100644
index e32565588c8..00000000000
--- a/gcc/testsuite/gcc.dg/tls/vis-attr-hidden-gd.c
+++ /dev/null
@@ -1,13 +0,0 @@
-/* { dg-do compile } */
-/* { dg-require-effective-target fpic } */
-/* { dg-require-effective-target tls } */
-/* { dg-options "-O2 -fPIC -fdump-ipa-whole-program" } */
-
-// tls_model should be global-dynamic due to explicitly specified attribute
-__attribute__((visibility("hidden")))
-__attribute__((tls_model("global-dynamic")))
-__thread int x;
-
-void reference() { x++; }
-
-/* { dg-final { scan-ipa-dump "Varpool flags: tls-global-dynamic" "whole-program" } } */
diff --git a/gcc/testsuite/gcc.dg/tls/vis-attr-hidden.c b/gcc/testsuite/gcc.dg/tls/vis-attr-hidden.c
deleted file mode 100644
index 0d43fc565b0..00000000000
--- a/gcc/testsuite/gcc.dg/tls/vis-attr-hidden.c
+++ /dev/null
@@ -1,12 +0,0 @@
-/* { dg-do compile } */
-/* { dg-require-effective-target fpic } */
-/* { dg-require-effective-target tls } */
-/* { dg-options "-O2 -fPIC -fdump-ipa-whole-program" } */
-
-//tls_model should be local-dynamic due to visibility("hidden")
-__attribute__((visibility("hidden")))
-__thread int x;
-
-void reference() { x++; }
-
-/* { dg-final { scan-ipa-dump "Varpool flags: tls-local-dynamic" "whole-program" } } */
diff --git a/gcc/testsuite/gcc.dg/tls/vis-flag-hidden-gd.c b/gcc/testsuite/gcc.dg/tls/vis-flag-hidden-gd.c
deleted file mode 100644
index cad41e0c8e6..00000000000
--- a/gcc/testsuite/gcc.dg/tls/vis-flag-hidden-gd.c
+++ /dev/null
@@ -1,13 +0,0 @@
-/* { dg-do compile } */
-/* { dg-require-effective-target fpic } */
-/* { dg-require-effective-target tls } */
-/* { dg-options "-O2 -fPIC -fdump-ipa-whole-program -fvisibility=hidden" } */
-
-
-// tls_model should be global-dynamic due to explicitly specified attribute
-__attribute__((tls_model("global-dynamic")))
-__thread int x;
-
-void reference() { x++; }
-
-/* { dg-final { scan-ipa-dump "Varpool flags: tls-global-dynamic" "whole-program" } } */
diff --git a/gcc/testsuite/gcc.dg/tls/vis-flag-hidden.c b/gcc/testsuite/gcc.dg/tls/vis-flag-hidden.c
deleted file mode 100644
index a15df092d4d..00000000000
--- a/gcc/testsuite/gcc.dg/tls/vis-flag-hidden.c
+++ /dev/null
@@ -1,12 +0,0 @@
-/* { dg-do compile } */
-/* { dg-require-effective-target fpic } */
-/* { dg-require-effective-target tls } */
-/* { dg-options "-O2 -fPIC -fdump-ipa-whole-program -fvisibility=hidden" } */
-
-
-// tls_model should be local-dynamic due to -fvisibility=hidden
-__thread int x;
-
-void reference() { x++; }
-
-/* { dg-final { scan-ipa-dump "Varpool flags: tls-local-dynamic" "whole-program" } } */
diff --git a/gcc/testsuite/gcc.dg/tls/vis-pragma-hidden-gd.c b/gcc/testsuite/gcc.dg/tls/vis-pragma-hidden-gd.c
deleted file mode 100644
index 3b3598134fe..00000000000
--- a/gcc/testsuite/gcc.dg/tls/vis-pragma-hidden-gd.c
+++ /dev/null
@@ -1,17 +0,0 @@
-/* { dg-do compile } */
-/* { dg-require-effective-target fpic } */
-/* { dg-require-effective-target tls } */
-/* { dg-options "-O2 -fPIC -fdump-ipa-whole-program" } */
-
-
-#pragma GCC visibility push(hidden)
-
-// tls_model should be global-dynamic due to explicitly specified attribute
-__attribute__((tls_model("global-dynamic")))
-__thread int x;
-
-#pragma GCC visibility pop
-
-void reference() { x++; }
-
-/* { dg-final { scan-ipa-dump "Varpool flags: tls-global-dynamic" "whole-program" } } */
diff --git a/gcc/testsuite/gcc.dg/tls/vis-pragma-hidden.c b/gcc/testsuite/gcc.dg/tls/vis-pragma-hidden.c
deleted file mode 100644
index 1be97644243..00000000000
--- a/gcc/testsuite/gcc.dg/tls/vis-pragma-hidden.c
+++ /dev/null
@@ -1,16 +0,0 @@
-/* { dg-do compile } */
-/* { dg-require-effective-target fpic } */
-/* { dg-require-effective-target tls } */
-/* { dg-options "-O2 -fPIC -fdump-ipa-whole-program" } */
-
-
-#pragma GCC visibility push(hidden)
-
-// tls_model should be local-dynamic due to a pragma
-__thread int x;
-
-#pragma GCC visibility pop
-
-void reference() { x++; }
-
-/* { dg-final { scan-ipa-dump "Varpool flags: tls-local-dynamic" "whole-program" } } */
diff --git a/gcc/varasm.cc b/gcc/varasm.cc
index d0beac8f8e3..a11184584a2 100644
--- a/gcc/varasm.cc
+++ b/gcc/varasm.cc
@@ -6658,36 +6658,6 @@ init_varasm_once (void)
 #endif
 }
 
-/* Determine whether SYMBOL is used in any optimized function.  */
-
-static bool
-have_optimized_refs (struct symtab_node *symbol)
-{
-  struct ipa_ref *ref;
-
-  for (int i = 0; symbol->iterate_referring (i, ref); i++)
-    {
-      cgraph_node *cnode = dyn_cast <cgraph_node *> (ref->referring);
-
-      if (cnode && opt_for_fn (cnode->decl, optimize))
-	return true;
-    }
-
-  return false;
-}
-
-/* Check if promoting general-dynamic TLS access model to local-dynamic is
-   desirable for DECL.  */
-
-static bool
-optimize_dyn_tls_for_decl_p (const_tree decl)
-{
-  if (cfun)
-    return optimize;
-  return symtab->state >= IPA && have_optimized_refs (symtab_node::get (decl));
-}
-
-
 enum tls_model
 decl_default_tls_model (const_tree decl)
 {
@@ -6705,7 +6675,7 @@ decl_default_tls_model (const_tree decl)
 
   /* Local dynamic is inefficient when we're not combining the
      parts of the address.  */
-  else if (is_local && optimize_dyn_tls_for_decl_p (decl))
+  else if (optimize && is_local)
     kind = TLS_MODEL_LOCAL_DYNAMIC;
   else
     kind = TLS_MODEL_GLOBAL_DYNAMIC;
