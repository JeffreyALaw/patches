
	PR middle-end/118084
gcc/
	* config/riscv/riscv.cc (generate_reflecting_code_using_brev): Handle
	sub-word sized objects correctly.

gcc/testsuite/
	* gcc.target/;riscv/;pr118084.c: New test.

diff --git a/gcc/config/riscv/riscv.cc b/gcc/config/riscv/riscv.cc
index 4f1f9defc80..1374868eddf 100644
--- a/gcc/config/riscv/riscv.cc
+++ b/gcc/config/riscv/riscv.cc
@@ -13602,18 +13602,27 @@ riscv_use_by_pieces_infrastructure_p (unsigned HOST_WIDE_INT size,
    we will get the desired one: 1000 1111.  */
 
 void
-generate_reflecting_code_using_brev (rtx *op)
+generate_reflecting_code_using_brev (rtx *op_p)
 {
-  machine_mode op_mode = GET_MODE (*op);
+  rtx op = *op_p;
+  machine_mode op_mode = GET_MODE (op);
+
+  /* OP may be smaller than a word.  We can use a paradoxical subreg
+     to compensate for that.  It should never be larger than a word
+     for RISC-V.  */
+  gcc_assert (op_mode <= word_mode);
+  if (op_mode != word_mode)
+    op = gen_lowpart (word_mode, op);
+
   HOST_WIDE_INT shift_val = (BITS_PER_WORD
 			     - GET_MODE_BITSIZE (op_mode).to_constant ());
-  riscv_expand_op (BSWAP, word_mode, *op, *op, *op);
-  riscv_expand_op (LSHIFTRT, word_mode, *op, *op,
+  riscv_expand_op (BSWAP, word_mode, op, op, op);
+  riscv_expand_op (LSHIFTRT, word_mode, op, op,
 		   gen_int_mode (shift_val, word_mode));
   if (TARGET_64BIT)
-    emit_insn (gen_riscv_brev8_di (*op, *op));
+    emit_insn (gen_riscv_brev8_di (op, op));
   else
-    emit_insn (gen_riscv_brev8_si (*op, *op));
+    emit_insn (gen_riscv_brev8_si (op, op));
 }
 
 
diff --git a/gcc/testsuite/gcc.target/riscv/pr118084.c b/gcc/testsuite/gcc.target/riscv/pr118084.c
new file mode 100644
index 00000000000..2ffa1d76c9b
--- /dev/null
+++ b/gcc/testsuite/gcc.target/riscv/pr118084.c
@@ -0,0 +1,13 @@
+/* { dg-do compile } */
+/* { dg-options "-O2 -march=rv32izk -mabi=ilp32 -Os" } */
+unsigned a;
+int main() {
+  int b = 8;
+  for (; b; b--)
+    if (a & 1)
+      a = a >> 1 ^ 30196000;
+    else
+      a >>= 1;
+}
+
+
