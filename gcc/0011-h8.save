diff --git a/gcc/config/h8300/addsub.md b/gcc/config/h8300/addsub.md
index b1eb0d20188..b67b1026346 100644
--- a/gcc/config/h8300/addsub.md
+++ b/gcc/config/h8300/addsub.md
@@ -239,3 +239,203 @@
   "reload_completed"
   "xor.w\\t#32768,%e0"
   [(set_attr "length" "4")])
+
+
+;; Basic overflow checking support.  These are nowhere near complete, but
+;; are sufficient to speed up the testsuite enough that the overflow
+;; tests are much less likely to timeout.
+(define_expand "addv<mode>4"
+  [(parallel
+    [(set (reg:CCV CC_REG)
+	  (ne:CCV
+	    (plus:<OVF>
+	      (sign_extend:<OVF> (match_operand:QHSI 1 "register_operand" ""))
+	      (sign_extend:<OVF> (match_operand:QHSI 2 "register_operand" "")))
+	    (sign_extend:<OVF> (plus:QHSI (match_dup 1) (match_dup 2)))))
+     (set (match_operand:QHSI 0 "register_operand" "")
+	  (plus:QHSI (match_dup 1) (match_dup 2)))])
+   (set (pc) (if_then_else
+	       (ne (reg:CCV CC_REG) (const_int 0))
+	       (label_ref (match_operand 3))
+	       (pc)))])
+
+(define_expand "subv<mode>4"
+  [(parallel
+    [(set (reg:CCV CC_REG)
+	  (ne:CCV
+	    (minus:<OVF>
+	      (sign_extend:<OVF> (match_operand:QHSI 1 "register_operand" ""))
+	      (sign_extend:<OVF> (match_operand:QHSI 2 "register_operand" "")))
+	    (sign_extend:<OVF> (plus:QHSI (match_dup 1) (match_dup 2)))))
+     (set (match_operand:QHSI 0 "register_operand" "")
+	  (minus:QHSI (match_dup 1) (match_dup 2)))])
+   (set (pc) (if_then_else
+	       (ne (reg:CCV CC_REG) (const_int 0))
+	       (label_ref (match_operand 3))
+	       (pc)))])
+
+(define_insn "*addv<mode>4"
+  [(set (reg:CCV CC_REG)
+	(ne:CCV (plus:<OVF>
+		   (sign_extend:<OVF>
+		     (match_operand:QHSI 1 "register_operand" "%0"))
+		   (sign_extend:<OVF>
+		     (match_operand:QHSI 2 "register_operand" "r")))
+		 (sign_extend:<OVF> (plus:QHSI (match_dup 1) (match_dup 2)))))
+  (set (match_operand:QHSI 0 "register_operand" "=r")
+       (plus:QHSI (match_dup 1) (match_dup 2)))]
+  ""
+{
+  if (GET_MODE (operands[0]) == QImode)
+    return "add.b %X2,%X0";
+  else if (GET_MODE (operands[0]) == HImode)
+    return "add.w %T2,%T0";
+  else if (GET_MODE (operands[0]) == SImode)
+    return "add.l %S2,%S0";
+  else
+   gcc_unreachable ();
+}
+  [(set_attr "length" "2")])
+
+(define_insn "*addv<mode>4_rev"
+  [(set (reg:CCV CC_REG)
+	(ne:CCV (plus:<OVF>
+		   (sign_extend:<OVF>
+		     (match_operand:QHSI 1 "register_operand" "%0"))
+		   (sign_extend:<OVF>
+		     (match_operand:QHSI 2 "register_operand" "r")))
+		 (sign_extend:<OVF> (plus:QHSI (match_dup 2) (match_dup 1)))))
+  (set (match_operand:QHSI 0 "register_operand" "=r")
+       (plus:QHSI (match_dup 2) (match_dup 1)))]
+  ""
+{
+  if (GET_MODE (operands[0]) == QImode)
+    return "add.b %X2,%X0";
+  else if (GET_MODE (operands[0]) == HImode)
+    return "add.w %T2,%T0";
+  else if (GET_MODE (operands[0]) == SImode)
+    return "add.l %S2,%S0";
+  else
+   gcc_unreachable ();
+}
+  [(set_attr "length" "2")])
+
+(define_insn "*subvqi4"
+  [(set (reg:CCV CC_REG)
+	(ne:CCV (minus:<OVF>
+		   (sign_extend:<OVF>
+		     (match_operand:QHSI 1 "register_operand" "0"))
+		   (sign_extend:<OVF>
+		     (match_operand:QHSI 2 "register_operand" "r")))
+		 (sign_extend:<OVF> (plus:QHSI (match_dup 1) (match_dup 2)))))
+  (set (match_operand:QHSI 0 "register_operand" "=r")
+       (minus:QHSI (match_dup 1) (match_dup 2)))]
+  ""
+{
+  if (GET_MODE (operands[0]) == QImode)
+    return "sub.b %X2,%X0";
+  else if (GET_MODE (operands[0]) == HImode)
+    return "sub.w %T2,%T0";
+  else if (GET_MODE (operands[0]) == SImode)
+    return "sub.l %S2,%S0";
+  else
+   gcc_unreachable ();
+}
+  [(set_attr "length" "2")])
+
diff --git a/gcc/config/h8300/h8300.cc b/gcc/config/h8300/h8300.cc
index 78cf15f15c7..af4c1cf9dbd 100644
--- a/gcc/config/h8300/h8300.cc
+++ b/gcc/config/h8300/h8300.cc
@@ -3269,10 +3269,7 @@ h8300_expand_store (rtx operands[])
   rtx op1 = operands[3];
   rtx tmp;
 
-  tmp = gen_rtx_COMPARE (VOIDmode, op0, op1);
-  emit_insn (gen_rtx_SET (cc0_rtx, tmp));
-
-  tmp = gen_rtx_fmt_ee (code, GET_MODE (dest), cc0_rtx, const0_rtx);
+  tmp = gen_rtx_fmt_ee (code, GET_MODE (dest), op0, op1);
   emit_insn (gen_rtx_SET (dest, tmp));
 }
 #endif
diff --git a/gcc/config/h8300/h8300.md b/gcc/config/h8300/h8300.md
index f592af1d5f7..7c4ae9664e1 100644
--- a/gcc/config/h8300/h8300.md
+++ b/gcc/config/h8300/h8300.md
@@ -68,6 +68,10 @@
    (FP_REG	11)
    (CC_REG	12)])
 
+;; Map from an integer mode to the next wider integer mode
+;; Useful for constructing the overflow patterns
+(define_mode_attr OVF [(QI "HI") (HI "SI") (SI "DI")])
+
 ;; ----------------------------------------------------------------------
 ;; ATTRIBUTES
 ;; ----------------------------------------------------------------------
diff --git a/gcc/config/h8300/jumpcall.md b/gcc/config/h8300/jumpcall.md
index b59639992a3..8e675bdeda6 100644
--- a/gcc/config/h8300/jumpcall.md
+++ b/gcc/config/h8300/jumpcall.md
@@ -67,6 +67,76 @@
 }
  [(set_attr "type" "branch")])
 
+;; This is the bare minimum to support the builtin overflow
+;; checking patterns.  It could possibly be merged into the
+;; other branch patterns given time and interest.
+(define_insn "*branch_1_v_set"
+  [(set (pc)
+	(if_then_else (ne (reg:CCV CC_REG) (const_int 0))
+		      (label_ref (match_operand 0 "" ""))
+		      (pc)))]
+  ""
+{
+  if (get_attr_length (insn) == 2)
+    return "bvs	%l0";
+  else if (get_attr_length (insn) == 4)
+    return "bvs	%l0:16";
+  else
+    return "bvc	.Lh8BR%=\;jmp	@%l0\\n.Lh8BR%=:";
+}
+ [(set_attr "type" "branch")])
+
+;; This is the bare minimum to support the builtin overflow
+;; checking patterns.  It could possibly be merged into the
+;; other branch patterns given time and interest.
+(define_insn "*branch_1_v_clear"
+  [(set (pc)
+	(if_then_else (eq (reg:CCV CC_REG) (const_int 0))
+		      (label_ref (match_operand 0 "" ""))
+		      (pc)))]
+  ""
+{
+  if (get_attr_length (insn) == 2)
+    return "bvc	%l0";
+  else if (get_attr_length (insn) == 4)
+    return "bvc	%l0:16";
+  else
+    return "bvs	.Lh8BR%=\;jmp	@%l0\\n.Lh8BR%=:";
+}
+ [(set_attr "type" "branch")])
+
+(define_insn "*branch_1_c_set"
+  [(set (pc)
+	(if_then_else (ne (reg:CCC CC_REG) (const_int 0))
+		      (label_ref (match_operand 0 "" ""))
+		      (pc)))]
+  ""
+{
+  if (get_attr_length (insn) == 2)
+    return "bcs	%l0";
+  else if (get_attr_length (insn) == 4)
+    return "bcs	%l0:16";
+  else
+    return "bcc	.Lh8BR%=\;jmp	@%l0\\n.Lh8BR%=:";
+}
+ [(set_attr "type" "branch")])
+
+(define_insn "*branch_1_c_clear"
+  [(set (pc)
+	(if_then_else (eq (reg:CCC CC_REG) (const_int 0))
+		      (label_ref (match_operand 0 "" ""))
+		      (pc)))]
+  ""
+{
+  if (get_attr_length (insn) == 2)
+    return "bcc	%l0";
+  else if (get_attr_length (insn) == 4)
+    return "bcc	%l0:16";
+  else
+    return "bcs	.Lh8BR%=\;jmp	@%l0\\n.Lh8BR%=:";
+}
+ [(set_attr "type" "branch")])
+
 
 (define_insn "*branch_1_false"
   [(set (pc)
diff --git a/gcc/config/h8300/testcompare.md b/gcc/config/h8300/testcompare.md
index 81dce1d0bc1..7db95a4f269 100644
--- a/gcc/config/h8300/testcompare.md
+++ b/gcc/config/h8300/testcompare.md
@@ -607,3 +607,16 @@
 		 (const_int 0)))
    (set (match_dup 0)
 	(<eqne_invert>:HI (reg:CCZ CC_REG) (const_int 0)))])
+
+(define_insn_and_split "*cstore<mode>"
+  [(set (match_operand:QHSI 0 "register_operand" "=r")
+	(geu:QHSI (match_operand:QHSI 1 "register_operand" "r")
+		  (match_operand:QHSI 2 "register_operand" "r")))]
+  ""
+  "#"
+  "&& reload_completed"
+  [(set (reg:CCC CC_REG)
+	(ltu:CCC (match_dup 1) (match_dup 2)))
+   (set (match_dup 0)
+	(eq:QHSI (reg:CCC CC_REG) (const_int 0)))])
+
