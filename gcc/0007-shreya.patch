diff --git a/gcc/simplify-rtx.cc b/gcc/simplify-rtx.cc
index 5e17a74b96a..70169ff696a 100644
--- a/gcc/simplify-rtx.cc
+++ b/gcc/simplify-rtx.cc
@@ -6435,6 +6435,21 @@ simplify_context::simplify_relational_operation_1 (rtx_code code,
       /* Canonicalize (LEU x 0) as (EQ x 0).  */
       if (code == LEU)
         return simplify_gen_relational (EQ, mode, cmp_mode, op0, op1);
+
+      if ((code == NE || code == EQ)
+	  /* Verify op0 is IOR */
+	  && GET_CODE (op0) == IOR
+	  /* only enters if op1 is 0 */
+	  /* Verify IOR operand is NE */
+	  && GET_CODE (XEXP (op0, 0)) == NE
+	  /* Verfiy second NE operand is 0 */
+	  && XEXP (XEXP (op0, 0), 1) == CONST0_RTX (mode))
+	{
+	  rtx t = gen_rtx_IOR (mode, XEXP (XEXP (op0, 0), 0), XEXP (op0, 1));
+	  t = gen_rtx_fmt_ee (code, mode, t, CONST0_RTX (mode));
+	  return t;
+	}
+
     }
   else if (op1 == const1_rtx)
     {
diff --git a/gcc/testsuite/gcc.target/riscv/pr52345.c b/gcc/testsuite/gcc.target/riscv/pr52345.c
new file mode 100644
index 00000000000..9836dd078d7
--- /dev/null
+++ b/gcc/testsuite/gcc.target/riscv/pr52345.c
@@ -0,0 +1,21 @@
+/* { dg-do compile } */
+/* { dg-options "-O2 -march=rv64gcbv_zicond -mabi=lp64d" { target { rv64 } } } */
+/* { dg-options "-O2 -march=rv32gcbv_zicond -mabi=ilp322" { target { rv32 } } } */
+
+int f(int a, int b)
+{
+  int c = a != 0;
+  int d = (c!=0|b!=0);
+  return d;
+}
+
+int h (int a, int b)
+{
+  int c = (a!=0|b);
+  int d = c==0;
+  return d;
+}
+
+/* { dg-final { scan-assembler-times {\tor} 2 } } */
+/* { dg-final { scan-assembler-times {\tsnez} 1 } } */
+/* { dg-final { scan-assembler-times {\tseqz} 1 } } */
