

 

Hi Jeff,

[Off-list]

I think I’ve identified and solved the problem with PR102785.

I believe the problem is that the operators of the addsub and

subadd instructions (and their saturating variants) are swapped

in the machine description.  So for addsub the low part is subtracted

and the high part (vec_select … 1) is added.  This incorrect pattern

didn’t matter until my recent patch allowed it to be evaluated at

compile-time.

 

I was wondering whether I could ask for your help testing the

attached patch, which I’ve confirmed fixes a cross-compiler, but

I’d feel happier if it was run through the testsuite.

 

It looks like bfin might also benefit significantly from one of my

other patches awaiting review:

https://gcc.gnu.org/pipermail/gcc-patches/2021-October/580808.html

 

From cse1 in your (currently failing) testcase, when fixed with the

attached patch, I now see:

 

(insn 11 10 12 2 (set (reg/v:V2HI 58 [ t ])

        (vec_concat:V2HI (ss_minus:HI (vec_select:HI (reg/v:V2HI 56 [ a ])

                    (parallel [

                            (const_int 0 [0])

                        ]))

                (vec_select:HI (reg/v:V2HI 57 [ b ])

                    (parallel [

                            (const_int 0 [0])

                        ])))

            (ss_plus:HI (vec_select:HI (reg/v:V2HI 56 [ a ])

                    (parallel [

                            (const_int 1 [0x1])

                        ]))

                (vec_select:HI (reg/v:V2HI 57 [ b ])

                    (parallel [

                            (const_int 1 [0x1])

                        ]))))) "../../bfin.c":15:7 168 {ssaddsubv2hi3}

     (expr_list:REG_EQUAL (const_vector:V2HI [

                (const_int 4096 [0x1000])

                (const_int 32767 [0x7fff])

            ])

        (expr_list:REG_DEAD (reg/v:V2HI 57 [ b ])

            (expr_list:REG_DEAD (reg/v:V2HI 56 [ a ])

                (nil)))))

 

Notice from the REG_EQUAL note that shows GCC knows what the

(correct) answer is, but doesn’t load the V2HI result directly from

the constant pool [actually I’m not sure if bfin can load a V2HI].

 

Many thanks for your help spinning the attached patch on your

bfin tester.  The provisional ChangeLog will be:

 

2021-10-15  Roger Sayle  <roger@nextmovesoftware.com>

 

gcc/ChangeLog

* config/bfin/bfin.md (addsubv2hi3, subaddv2hi3, ssaddsubv2hi3,

sssubaddv2hi3):  Swap the order of operators in vec_concat.

 

Thanks again for your help.

Best regards,

Roger

--

 

patchj.txt

diff --git a/gcc/config/bfin/bfin.md b/gcc/config/bfin/bfin.md
index 1ec0bbb..c6a481d 100644
--- a/gcc/config/bfin/bfin.md
+++ b/gcc/config/bfin/bfin.md
@@ -2999,19 +2999,6 @@
 (define_insn "addsubv2hi3"
   [(set (match_operand:V2HI 0 "register_operand" "=d")
 	(vec_concat:V2HI
-	 (plus:HI (vec_select:HI (match_operand:V2HI 1 "register_operand" "d")
-				 (parallel [(const_int 0)]))
-		  (vec_select:HI (match_operand:V2HI 2 "register_operand" "d")
-				 (parallel [(const_int 0)])))
-	 (minus:HI (vec_select:HI (match_dup 1) (parallel [(const_int 1)]))
-		   (vec_select:HI (match_dup 2) (parallel [(const_int 1)])))))]
-  ""
-  "%0 = %1 +|- %2%!"
-  [(set_attr "type" "dsp32")])
-
-(define_insn "subaddv2hi3"
-  [(set (match_operand:V2HI 0 "register_operand" "=d")
-	(vec_concat:V2HI
 	 (minus:HI (vec_select:HI (match_operand:V2HI 1 "register_operand" "d")
 				  (parallel [(const_int 0)]))
 		   (vec_select:HI (match_operand:V2HI 2 "register_operand" "d")
@@ -3019,23 +3006,23 @@
 	 (plus:HI (vec_select:HI (match_dup 1) (parallel [(const_int 1)]))
 		  (vec_select:HI (match_dup 2) (parallel [(const_int 1)])))))]
   ""
-  "%0 = %1 -|+ %2%!"
+  "%0 = %1 +|- %2%!"
   [(set_attr "type" "dsp32")])
 
-(define_insn "ssaddsubv2hi3"
+(define_insn "subaddv2hi3"
   [(set (match_operand:V2HI 0 "register_operand" "=d")
 	(vec_concat:V2HI
-	 (ss_plus:HI (vec_select:HI (match_operand:V2HI 1 "register_operand" "d")
-				    (parallel [(const_int 0)]))
-		     (vec_select:HI (match_operand:V2HI 2 "register_operand" "d")
-				    (parallel [(const_int 0)])))
-	 (ss_minus:HI (vec_select:HI (match_dup 1) (parallel [(const_int 1)]))
-		      (vec_select:HI (match_dup 2) (parallel [(const_int 1)])))))]
+	 (plus:HI (vec_select:HI (match_operand:V2HI 1 "register_operand" "d")
+				 (parallel [(const_int 0)]))
+		  (vec_select:HI (match_operand:V2HI 2 "register_operand" "d")
+				 (parallel [(const_int 0)])))
+	 (minus:HI (vec_select:HI (match_dup 1) (parallel [(const_int 1)]))
+		   (vec_select:HI (match_dup 2) (parallel [(const_int 1)])))))]
   ""
-  "%0 = %1 +|- %2 (S)%!"
+  "%0 = %1 -|+ %2%!"
   [(set_attr "type" "dsp32")])
 
-(define_insn "sssubaddv2hi3"
+(define_insn "ssaddsubv2hi3"
   [(set (match_operand:V2HI 0 "register_operand" "=d")
 	(vec_concat:V2HI
 	 (ss_minus:HI (vec_select:HI (match_operand:V2HI 1 "register_operand" "d")
@@ -3045,6 +3032,19 @@
 	 (ss_plus:HI (vec_select:HI (match_dup 1) (parallel [(const_int 1)]))
 		     (vec_select:HI (match_dup 2) (parallel [(const_int 1)])))))]
   ""
+  "%0 = %1 +|- %2 (S)%!"
+  [(set_attr "type" "dsp32")])
+
+(define_insn "sssubaddv2hi3"
+  [(set (match_operand:V2HI 0 "register_operand" "=d")
+	(vec_concat:V2HI
+	 (ss_plus:HI (vec_select:HI (match_operand:V2HI 1 "register_operand" "d")
+				    (parallel [(const_int 0)]))
+		     (vec_select:HI (match_operand:V2HI 2 "register_operand" "d")
+				    (parallel [(const_int 0)])))
+	 (ss_minus:HI (vec_select:HI (match_dup 1) (parallel [(const_int 1)]))
+		      (vec_select:HI (match_dup 2) (parallel [(const_int 1)])))))]
+  ""
   "%0 = %1 -|+ %2 (S)%!"
   [(set_attr "type" "dsp32")])
 

